import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.3ce7f228.js";const m=JSON.parse('{"title":"调用组件内部方法","description":"","frontmatter":{},"headers":[],"relativePath":"docs/api/api.md","filePath":"docs/api/api.md"}'),p={name:"docs/api/api.md"},o=l(`<h1 id="调用组件内部方法" tabindex="-1">调用组件内部方法 <a class="header-anchor" href="#调用组件内部方法" aria-label="Permalink to &quot;调用组件内部方法&quot;">​</a></h1><p>不管是内部组件还是自定义组件，用户都可以通过id或者组件类型的方式调用其内部方法。即使在组件内部也可以调用其它组件中的方法。</p><h2 id="组件中把需要被外部调用的方法暴露出来" tabindex="-1">组件中把需要被外部调用的方法暴露出来 <a class="header-anchor" href="#组件中把需要被外部调用的方法暴露出来" aria-label="Permalink to &quot;组件中把需要被外部调用的方法暴露出来&quot;">​</a></h2><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">defineExpose({ getForm })</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">defineExpose({ getForm })</span></span></code></pre></div><h2 id="外部调用组件内部方法" tabindex="-1">外部调用组件内部方法 <a class="header-anchor" href="#外部调用组件内部方法" aria-label="Permalink to &quot;外部调用组件内部方法&quot;">​</a></h2><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;home&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">form</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;formDesignRef&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">form</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ref } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vue&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { form } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;../assets/bearForm/bearForm.es.js&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;../assets/bearForm/style.css&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">formDesignRef</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 根据id调用指定form的刷新方法</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resetForm</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  formDesignRef.value.</span><span style="color:#B392F0;">getRefById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;form16954158406647121&#39;</span><span style="color:#E1E4E8;">).el.</span><span style="color:#B392F0;">resetForm</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 通常来说一个模版中只有一个表单组件，此时根据类型调用form的方法</span></span>
<span class="line"><span style="color:#6A737D;">// const el = formDesignRef.value.getRefByType(&#39;form&#39;)[0].el</span></span>
<span class="line"><span style="color:#6A737D;">// el.resetForm()</span></span>
<span class="line"><span style="color:#6A737D;">// el.setFormValue({ input: 777, datePicker: &#39;2023-09-11&#39; })</span></span>
<span class="line"><span style="color:#6A737D;">// el.getForm()</span></span>
<span class="line"><span style="color:#6A737D;">// const formRef = el.formRef</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">scoped</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;home&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">form</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;formDesignRef&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">form</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setup</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { ref } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vue&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { form } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;../assets/bearForm/bearForm.es.js&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;../assets/bearForm/style.css&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">formDesignRef</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 根据id调用指定form的刷新方法</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resetForm</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  formDesignRef.value.</span><span style="color:#6F42C1;">getRefById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;form16954158406647121&#39;</span><span style="color:#24292E;">).el.</span><span style="color:#6F42C1;">resetForm</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 通常来说一个模版中只有一个表单组件，此时根据类型调用form的方法</span></span>
<span class="line"><span style="color:#6A737D;">// const el = formDesignRef.value.getRefByType(&#39;form&#39;)[0].el</span></span>
<span class="line"><span style="color:#6A737D;">// el.resetForm()</span></span>
<span class="line"><span style="color:#6A737D;">// el.setFormValue({ input: 777, datePicker: &#39;2023-09-11&#39; })</span></span>
<span class="line"><span style="color:#6A737D;">// el.getForm()</span></span>
<span class="line"><span style="color:#6A737D;">// const formRef = el.formRef</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">style</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">scoped</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">style</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h2 id="组件内部调用其它组件方法" tabindex="-1">组件内部调用其它组件方法 <a class="header-anchor" href="#组件内部调用其它组件方法" aria-label="Permalink to &quot;组件内部调用其它组件方法&quot;">​</a></h2><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">const props = defineProps({getRefById: Function, getRefByType: Function })</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">const props = defineProps({getRefById: Function, getRefByType: Function })</span></span></code></pre></div><h2 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h2><table><thead><tr><th>方法名</th><th>说明</th><th>类型</th></tr></thead><tbody><tr><td>getRefById</td><td>根据id获取指定组件的ref对象，调用内部方法</td><td>string</td></tr><tr><td>getRefByType</td><td>根据类型获取指定组件的ref对象，调用内部方法</td><td>string</td></tr></tbody></table>`,10),e=[o];function t(r,c,y,E,i,d){return a(),n("div",null,e)}const g=s(p,[["render",t]]);export{m as __pageData,g as default};
